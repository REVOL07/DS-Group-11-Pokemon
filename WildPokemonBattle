package project.pikachu;

import java.util.Scanner;
import java.util.Map;
import java.util.ArrayList;
import java.util.Random;
import java.util.HashMap;
import java.util.List;

public class WildPokemonBattle {

    private Player player;

    public WildPokemonBattle() {
        this.player = new Player("");  // Starting location
    }

    private static Scanner scanner = new Scanner(System.in);

    public static void wildbattle(Player player, Wild wild, String location) {

        boolean Catch = false;

        if (player.getTeam().stream().noneMatch(pokemon -> pokemon.getcurrentHitPoints() > 0)) {
    System.out.println("None of your Pokémon have HP left! You need to restore their HP.");
    System.out.println("Please go to the nearest Pokemon Center to heal your Pokémon.");
    System.out.println("+----------------------------------------------------------------------+");
    return; // Stop execution if no Pokémon have HP
}


        if (player.getTeam().isEmpty()) {
    System.out.println("You have no Pokémon to fight with! Catch or receive one first.");
    System.out.println("+----------------------------------------------------------------------+");
    return;
}


        if (wild == null || wild.getwildPokemon() == null || wild.getwildPokemon().isEmpty()) {
    System.out.println("There seems to be an error: " + (wild == null ? "No wild Pokémon instance." : wild.getwildName() + " has no Pokémon."));
    return;
}


        List<Pokemon> wildTeam = new ArrayList<>(wild.getwildPokemon());
boolean playerWon = true;

for (Pokemon wildPokemon : wildTeam) {
    Pokemon playerPokemon = player.getTeam().get(0); // Assuming the player has Pokémon
    System.out.println("You are about to fight " + wildPokemon.getName() + "!");
    System.out.println("Prepare yourself for a wild battle!");

    System.out.println("Your Pokémon: " + playerPokemon.getName() + " - Level: " + playerPokemon.getLevel());
    System.out.println("+----------------------------------------------------------------------+");
    System.out.println("Battle Start: Trainer with " + wildPokemon.getName() + " [Level: " + wildPokemon.getLevel() + "]!");


            if (playerPokemon.getStrongAgainst().contains(wildPokemon.getType())) {
    System.out.println(playerPokemon.getName() + " is sent out! Its " + playerPokemon.getType() + " type is strong against the opponent's " + wildPokemon.getName() + ".");
} else if (wildPokemon.getStrongAgainst().contains(playerPokemon.getType())) {
    System.out.println(playerPokemon.getName() + " is sent out! Its " + playerPokemon.getType() + " type is weak against the opponent's " + wildPokemon.getName() + ".");
} else {
    System.out.println(playerPokemon.getName() + " is sent out! Its " + playerPokemon.getType() + " type is normal against the opponent's " + wildPokemon.getName() + ".");
}


            // Battle loop
            int round = 1;
            int gainXP = 0;
            while (playerPokemon.getcurrentHitPoints() > 0 && wildPokemon.getcurrentHitPoints() > 0) {
                System.out.println("Round " + round + ":");
                System.out.println(playerPokemon.getName() + "'s Moves:");
                Map<String, Integer> moves = playerPokemon.getMoves();
                int index = 1;
                for (String move : moves.keySet()) {
                    System.out.println(index + ". " + move);
                    index++;
                }
                System.out.println(index + ". Run");
                System.out.println((index + 1) + ". Catch"); 
                System.out.print("Which move will " + playerPokemon.getName() + " use?\nYour choice: ");
                int selectedMoveIndex = scanner.nextInt();

                if (selectedMoveIndex == index) { //run----------------------------------------------------------------------------------------------------------------------------
                    if (wildrun()) {
                        return; // End the battle 
                    }
                } else if (selectedMoveIndex == index + 1) { //CatchPokemon----------------------------------------------------------------------------------------------------------------------------------------------------
                    System.out.println("Trying to catch the wild Pokémon...");
                    if (catchPokemon(player, wildPokemon, wildPokemon.getName())) {
                        return; // End the battle
                    }
                } else {
                    String selectedMove = playerPokemon.getMoves().keySet().toArray(new String[0])[selectedMoveIndex - 1];
                    System.out.println("+----------------------------------------------------------------------+");
                    attack(playerPokemon, wildPokemon, selectedMove);

                }

                if (wildPokemon.getcurrentHitPoints() <= 0) {
                    System.out.println(wildPokemon.getName() + " fainted!\n");
                    int XPGained = 5 * wildPokemon.getLevel();
                    playerPokemon.setcurrentXP(playerPokemon.getcurrentXP() + XPGained); // Add  gained XP to the current XP

                    // Check for level up
                    while (playerPokemon.getcurrentXP() >= playerPokemon.getXP()) {
                        int excessXP = playerPokemon.getcurrentXP() - playerPokemon.getXP();
                        playerPokemon.levelUp(playerPokemon.getXP(), playerPokemon.getHitPoints());
                        playerPokemon.setcurrentXP(excessXP); // Set  remaining XP after leveling up
                    }

                    gainXP += XPGained;
                    System.out.println(playerPokemon.getName() + " gained " + XPGained + " XP.");
                    System.out.println(playerPokemon.getName() + " [XP: " + playerPokemon.getcurrentXP() + "/" + playerPokemon.getXP() + "]");

                    // Check if the player Pokémon leveled up and print the level-up message
                    if (playerPokemon.getcurrentXP() >= playerPokemon.getXP()) {
                        int oldLevel = playerPokemon.getLevel() - 1;
                        System.out.println(playerPokemon.getName() + " leveled up.");
                        System.out.println(playerPokemon.getName() + " [Level " + oldLevel + " --> Level " + playerPokemon.getLevel() + "]");
                    }

                    break;
                }

               
                // Wild Pokemon's turn----------------------------------------------------------------------------------------------------------------------------------------------
                System.out.println("+----------------------------------------------------------------------+");
                String wildMove = wildPokemon.getMoves().keySet().iterator().next(); // Wild Pokemon's first move
                attack(wildPokemon, playerPokemon, wildMove);

                if (playerPokemon.getcurrentHitPoints() <= 0) {
                    System.out.println(playerPokemon.getName() + " fainted!");
                    playerWon = false;
                    break;
                }

                round++;
            }

            if (!playerWon) {
                System.out.println("You were defeated.");
                System.out.println("+----------------------------------------------------------------------+");
                return; // Exit the method if the player lost
            }
        }

        if (playerWon) {
            System.out.println("You won the battle!");
            System.out.println("+----------------------------------------------------------------------+");
        }
    }

    private static void attack(Pokemon attacker, Pokemon defender, String move) {
        Map<String, Integer> moves = attacker.getMoves();
        int damage = moves.get(move);
        boolean isSuperEffective = attacker.getStrongAgainst().contains(defender.getType());
        boolean isNotEffective = attacker.getWeakAgainst().contains(defender.getType());

        if (isSuperEffective) {
            damage *= 1.5;
            System.out.println(attacker.getName() + " used " + move + "!");
            System.out.println("It's super effective!");
        } else if (isNotEffective) {
            damage *= 0.5;
            System.out.println(attacker.getName() + " used " + move + "!");
            System.out.println("It's not very effective.");
        } else {
            System.out.println(attacker.getName() + " used " + move + "!");
        }

        defender.setcurrentHitPoints(Math.max(defender.getcurrentHitPoints() - damage, 0)); // Ensure currentHitPoints doesn't go below 0
        System.out.println(defender.getName() + "'s HP drops " + (isSuperEffective ? "significantly" : "slightly") + ". [" + defender.getName() + " HP: " + defender.getcurrentHitPoints() + "/" + defender.getHitPoints() + "]");
    }

    private static boolean catchPokemon(Player player, Pokemon wildPokemon, String wildPokemonName) {

        Random random = new Random();
        int catchChance = random.nextInt(60);

        // basic catch rate
        int baseCatchRate = 30; // Base catch rate is 30%

        if (wildPokemon.getcurrentHitPoints() < wildPokemon.getHitPoints() / 4) {
            baseCatchRate += 20; // Increase catch rate if Pokémon HP is below 25%
        } else if (wildPokemon.getcurrentHitPoints() < wildPokemon.getHitPoints() / 2) {
            baseCatchRate += 10; // Increase catch rate if Pokémon HP is below 50%
        }

        if (catchChance < baseCatchRate) {
            System.out.println("Congratulations! You caught the wild " + wildPokemon.getName() + "!");
           player.addPokemon(new Pokemon(wildPokemon));
            System.out.println("+----------------------------------------------------------------------+");
            boolean Catch = true;
            return true;
        } else {
            System.out.println("Oh no! The wild " + wildPokemon.getName() + " broke free!");
            System.out.println("+----------------------------------------------------------------------+");
            return false;
        }

    }

    private static boolean wildrun() {
        System.out.println("You chose to run away from the battle!");
        System.out.println("The battle has ended.");
        System.out.println("+----------------------------------------------------------------------+");
        return true; // S true to indicate the player has run   
    }
}
